import { Component, OnInit, Input } from '@angular/core';
import { IAngularMyDpOptions } from 'angular-mydatepicker';
import { MatSnackBar } from '@angular/material/snack-bar';
import { SalesService } from 'src/app/_services/sales.service';
import { Deal } from '../deals-create/Deal';
import { DealSalesOrder } from './DealSalesOrder';
import Swal from 'sweetalert2';
import { AuthService } from 'src/app/_services/auth.service';
import { environment } from 'src/environments/environment';
declare var $: any;

@Component({
  selector: 'app-deals-sales-order',
  templateUrl: './deals-sales-order.component.html',
  styleUrls: ['./deals-sales-order.component.css']
})
export class DealsSalesOrderComponent implements OnInit {

  public myDatePickerOptions: IAngularMyDpOptions = {
    dateRange: false,
    dateFormat: 'dd/mm/yyyy',
    closeSelectorOnDateSelect: true
  };

  loading = false;
  saving = false;

  showTermsMasters = false;
  showPDFTemplateOptions = false;
  generatingPDF = false;
  showAddNewEmail = false;

  shareWhatsappText = '';
  shareWhatsappTo = '+91';

  constructor(private snackbar: MatSnackBar, private ss: SalesService, private auth: AuthService) { }

  @Input("dealId") dealId: number;
  so: DealSalesOrder = new DealSalesOrder();
  deal: Deal = new Deal();

  addRoundSeal = true;
  addFullSeal = true;
  addSign = true;
  designation = this.auth.getLoginAgentDesignation();


  ngOnInit() {
    this.so.subject = 'Sales Order - Reg';
    this.getDealSalesOrder();
  }

  saveDealSalesOrder() {

    if (this.so.salesOrderNo == '') {
      this.snackbar.open('Sales Order No should not be empty');
      return false;
    }

    this.saving = true;
    this.ss.saveDealSalesOrder(this.so).subscribe(res => {
      this.saving = false;
      if (res['StatusCode'] == '00') {
        this.snackbar.open('Saved Successfully');
        this.so = res['DealSalesOrder'];

        this.so.dueDateObject = { isRange: false, singleDate: { jsDate: (this.so.dueDate != null) ? new Date(this.so.dueDate) : this.so.dueDate } };

      } else if (res['StatusCode'] == '03') {
        this.snackbar.open(res['StatusDesc']);
      } else {
        this.snackbar.open('Somethig went wrong');
      }
    }, error => { this.saving = false; })
  }

  getDealSalesOrder() {
    this.loading = true;
    this.ss.getDealSalesOrder(this.dealId).subscribe(res => {
      this.loading = false;
      if (res['StatusCode'] == '00') {
        if (res['Deal'] != null) {
          this.deal = res['Deal'];
          if (res['DealSalesOrder'] != null) {
            this.so = res['DealSalesOrder'];
            this.so.dueDateObject = { isRange: false, singleDate: { jsDate: (this.so.dueDate != null) ? new Date(this.so.dueDate) : this.so.dueDate } };
          } else if (res['DealSalesOrder'] == null) {

            if (res['AutoGeneratedSONo'] && res['AutoGeneratedSONo'] != '' && res['AutoGeneratedSONo'] != null) {
              this.so.salesOrderNo = res['AutoGeneratedSONo'];
              this.snackbar.open('Sales Order No "' + this.so.salesOrderNo + '" AutoIncremented from last quotation.');
            }
            if (res['LastTerms'] && res['LastTerms'] != '' && res['LastTerms'] != null) {
              this.so.terms = res['LastTerms'];
            }

            this.so.dealId = this.dealId;
            this.so.purchaseOrderNo = this.deal.purchaseOrderNo;
          } else {
            this.so.dealId = this.dealId;
            this.so.purchaseOrderNo = this.deal.purchaseOrderNo;
          }
        }
      } else {
        this.snackbar.open('Somethig went wrong');
      }
    }, error => { this.loading = false; })
  }

  clearFilters() {
    this.so = new DealSalesOrder();
  }

  generateSalesOrderPDF(Template) {
    this.generatingPDF = true;

    this.ss.generateSalesOrderPDF(this.so, Template, this.addRoundSeal, this.addFullSeal, this.addSign, this.designation).subscribe(res => {

      this.generatingPDF = false;
      if (res['StatusCode'] == '00') {
        this.so.filename = res['DealSalesOrder']['filename'];
        this.snackbar.open('Generated Successfully');
        this.viewPDF();
      } else {
        this.snackbar.open('Something went wrong! Try again later');
      }
    })
  }

  viewPDF() {
    this.ss.viewPDF(this.so.dealId, this.so.filename);
  }

  downloadPDF() {
    this.ss.downloadPDF(this.so.dealId, this.so.filename);
  }

  fileUploadChange(file: File) {
    console.log(file);

    if (file.type.toLowerCase() != 'application/pdf') {
      this.snackbar.open('Only PDF file type is valid');
      return false;
    }

    Swal.fire({
      title: 'Are you sure?',
      text: "You want to Upload.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, Upload!'
    }).then((result) => {
      if (result.value) {
        this.generatingPDF = true;
        this.ss.UploadGeneratedSalesOrderPDF(this.so.id, file).subscribe(res => {

          this.generatingPDF = false;
          if (res['StatusCode'] == '00') {
            this.so.filename = res['DealSalesOrder']['filename'];
            this.snackbar.open('Uploaded Successfully', 'OK');
            this.viewPDF();
          } else {
            this.snackbar.open('Something went wrong! Try again later');
          }
        })
      }
    })
  }

  resp(event) {
    console.log(event);
    if (event == 'close' || event == 'success') {
      this.showAddNewEmail = false;
    }
  }

  shareWhatsApp() {
    let url = `https://wa.me/${this.shareWhatsappTo}?text=${encodeURI(this.shareWhatsappText)}`;
    window.open(url, '_blank');
  }

  openShareWhatsAppModal() {

    let url = environment.apiUrl + 'download/download-deals-pdf/view/' + this.dealId + '/' + this.so.filename;

    this.shareWhatsappText = this.so.subject + '\n' +
      'Sales Order Number : ' + this.so.salesOrderNo + '\n\n' +
      'View Sales Order by below url : \n\n' +
      url + ' \n\n'
      + 'Thanks\n' + this.auth.getLoginAgentFullName();

    console.log(this.shareWhatsappText);

    $(function () {
      $('#whatsappShareModal').appendTo("body").modal('show');
    });
  }


}
