import { Component, OnInit, Input } from '@angular/core';
import { IAngularMyDpOptions } from 'angular-mydatepicker';
import { MatSnackBar } from '@angular/material/snack-bar';
import { SalesService } from 'src/app/_services/sales.service';
import { AuthService } from 'src/app/_services/auth.service';
import { DealProformaInvoice } from './DealProformaInvoice';
import { Deal } from '../deals-create/Deal';
import { environment } from 'src/environments/environment';
import Swal from 'sweetalert2';
declare var $: any;

@Component({
  selector: 'app-deals-proforma-invoice',
  templateUrl: './deals-proforma-invoice.component.html',
  styleUrls: ['./deals-proforma-invoice.component.css']
})
export class DealsProformaInvoiceComponent implements OnInit {

  public myDatePickerOptions: IAngularMyDpOptions = {
    dateRange: false,
    dateFormat: 'dd/mm/yyyy',
    closeSelectorOnDateSelect: true
  };

  loading = false;
  saving = false;
  showAddNewEmail = false;

  showTermsMasters = false;
  showPDFTemplateOptions = false;
  generatingPDF = false;
  shareWhatsappText = '';
  shareWhatsappTo = '+91';
  constructor(private snackbar: MatSnackBar, private ss: SalesService, private auth: AuthService) { }

  @Input("dealId") dealId: number;
  dpi: DealProformaInvoice = new DealProformaInvoice();
  deal: Deal = new Deal();

  addRoundSeal = true;
  addFullSeal = true;
  addSign = true;
  detailedPricing = true;
  exportType = 'PDF';
  designation = this.auth.getLoginAgentDesignation();

  ngOnInit() {
    this.dpi.subject = 'Proforma Invoice - Reg';
    this.getDealProformaInvoice();
  }

  saveDealProformaInvoice() {

    if (this.dpi.proformaInvoiceNo == '') {
      this.snackbar.open('Proforma Invoice No should not be empty');
      return false;
    }

    this.saving = true;
    this.ss.saveDealProformaInvoice(this.dpi).subscribe(res => {
      this.saving = false;
      if (res['StatusCode'] == '00') {
        this.snackbar.open('Saved Successfully');
        this.dpi = res['DealProformaInvoice'];

        this.dpi.invoiceDateObject = { isRange: false, singleDate: { jsDate: (this.dpi.invoiceDate != null) ? new Date(this.dpi.invoiceDate) : this.dpi.invoiceDate } };
        this.dpi.dueDateObject = { isRange: false, singleDate: { jsDate: (this.dpi.dueDate != null) ? new Date(this.dpi.dueDate) : this.dpi.dueDate } };

      } else if (res['StatusCode'] == '03') {
        this.snackbar.open(res['StatusDesc']);
      } else {
        this.snackbar.open('Somethig went wrong');
      }
    }, error => { this.saving = false; })
  }

  getDealProformaInvoice() {
    this.loading = true;
    this.ss.getDealProformaInvoice(this.dealId).subscribe(res => {
      this.loading = false;
      if (res['StatusCode'] == '00') {
        if (res['Deal'] && res['Deal'] != null) {
          this.deal = res['Deal'];
          if (res['DealProformaInvoice'] != null) {
            this.dpi = res['DealProformaInvoice'];
            this.dpi.invoiceDateObject = { isRange: false, singleDate: { jsDate: (this.dpi.invoiceDate != null) ? new Date(this.dpi.invoiceDate) : this.dpi.invoiceDate } };
            this.dpi.dueDateObject = { isRange: false, singleDate: { jsDate: (this.dpi.dueDate != null) ? new Date(this.dpi.dueDate) : this.dpi.dueDate } };
          } else if (res['DealProformaInvoice'] == null) {
            if (res['AutoGeneratedInvoiceNo'] && res['AutoGeneratedInvoiceNo'] != '' && res['AutoGeneratedInvoiceNo'] != null) {
              this.dpi.proformaInvoiceNo = res['AutoGeneratedInvoiceNo'];
              this.snackbar.open('Proforma Invoice No "' + this.dpi.proformaInvoiceNo + '" AutoIncremented from last quotation.');
            }
            if (res['LastTerms'] && res['LastTerms'] != '' && res['LastTerms'] != null) {
              this.dpi.terms = res['LastTerms'];
            }

            this.dpi.dealId = this.dealId;
            this.dpi.purchaseOrderNo = this.deal.purchaseOrderNo;
            this.dpi.salesOrderNo = this.deal.salesOrderNo;
          } else {
            this.dpi.dealId = this.dealId;
            this.dpi.purchaseOrderNo = this.deal.purchaseOrderNo;
            this.dpi.salesOrderNo = this.deal.salesOrderNo;
          }
        }
      } else {
        this.snackbar.open('Somethig went wrong');
      }
    }, error => { this.loading = false; })
  }

  clearFilters() {
    this.dpi = new DealProformaInvoice();
  }

  generateProformaInvoicePDF(TemplateName) {
    this.generatingPDF = true;

    this.ss.generateProformaInvoicePDF(this.dpi, TemplateName, this.addRoundSeal, this.addFullSeal,
      this.addSign, this.designation, this.exportType, this.detailedPricing).subscribe(res => {

        this.generatingPDF = false;
        if (res['StatusCode'] == '00') {
          this.dpi.filename = res['DealProformaInvoice']['filename'];
          this.snackbar.open('Generated Successfully');
          this.viewPDF();
        } else {
          this.snackbar.open('Something went wrong! Try again later');
        }
      })
  }

  viewPDF() {
    let url = environment.apiUrl + 'download/download-deals-pdf/view/' + this.dealId + '/' + this.dpi.filename;
    window.open(url, 'winname', 'directories=no,titlebar=no,toolbar=no,location=no,status=no,menubar=no,scrollbars=no,resizable=no,width=auto,height=auto');
  }

  downloadPDF() {
    let url = environment.apiUrl + 'download/download-deals-pdf/download/' + this.dealId + '/' + this.dpi.filename;
    window.open(url, '_blank');
  }

  invoiceFileUploadChange(file: File) {
    console.log(file);

    if (file.type.toLowerCase() != 'application/pdf') {
      this.snackbar.open('Only PDF file type is valid');
      return false;
    }

    Swal.fire({
      title: 'Are you sure?',
      text: "You want to Upload.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, Upload!'
    }).then((result) => {
      if (result.value) {
        this.generatingPDF = true;
        this.ss.UploadGeneratedInvoicePDF(this.dpi.id, file).subscribe(res => {

          this.generatingPDF = false;
          if (res['StatusCode'] == '00') {
            this.dpi.filename = res['DealProformaInvoice']['filename'];
            this.snackbar.open('Uploaded Successfully', 'OK');
            this.viewPDF();
          } else {
            this.snackbar.open('Something went wrong! Try again later');
          }
        })
      }
    })
  }


  resp(event) {
    console.log(event);
    if (event == 'close' || event == 'success') {
      this.showAddNewEmail = false;
    }
  }

  openShareWhatsAppModal() {

    let url = environment.apiUrl + 'download/download-deals-pdf/view/' + this.dealId + '/' + this.dpi.filename;

    this.shareWhatsappText = this.dpi.subject + '\n' +
      'Proforma Invoice Number : ' + this.dpi.proformaInvoiceNo + '\n\n' +
      'View Proforma Invoice by below url : \n\n' +
      url + '\n\n'
      + 'Thanks\n' + this.auth.getLoginAgentFullName();

    console.log(this.shareWhatsappText);

    $(function () {
      $('#whatsappShareModal').appendTo("body").modal('show');
    });
  }


  shareWhatsApp() {
    let url = `https://wa.me/${this.shareWhatsappTo}?text=${encodeURI(this.shareWhatsappText)}`;
    window.open(url, '_blank');
  }


}
