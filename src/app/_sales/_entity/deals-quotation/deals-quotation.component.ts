import { Component, OnInit, Input } from '@angular/core';
import { DealQuotation } from './DealQuotation';
import { IAngularMyDpOptions } from 'angular-mydatepicker';
import { MatSnackBar } from '@angular/material/snack-bar';
import { environment } from 'src/environments/environment';
import { SalesService } from 'src/app/_services/sales.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { AuthService } from 'src/app/_services/auth.service';
import { Deal } from '../deals-create/Deal';
import { TeamsService } from 'src/app/_services/teams.service';
declare var $: any;

@Component({
  selector: 'app-deals-quotation',
  templateUrl: './deals-quotation.component.html',
  styleUrls: ['./deals-quotation.component.css']
})
export class DealsQuotationComponent implements OnInit {

  public myDatePickerOptions: IAngularMyDpOptions = {
    dateRange: false,
    dateFormat: 'dd/mm/yyyy',
    closeSelectorOnDateSelect: true
  };

  loading = false;

  saving = false;
  showAddNewEmail = false;

  showTermsMasters = false;
  showPDFTemplateOptions = false;
  generatingQuotationPDF = false;

  preamble = '';
  preamblePosition = 'Preamble First';
  exportType = "PDF";
  addRoundSeal = true;
  addFullSeal = true;
  detailedPricing = true;
  addSign = true;
  designation = this.auth.getLoginAgentDesignation();

  shareWhatsappText = '';
  shareWhatsappTo = '+91';

  constructor(private router: Router, private snackbar: MatSnackBar, private ss: SalesService, private auth: AuthService, private ts: TeamsService) {
    this.dealQuote.quoteStage = 'Draft';
  }

  @Input("dealId") dealId: number;
  @Input("deal") deal: Deal;

  dealQuote: DealQuotation = new DealQuotation();

  ngOnInit() {
    this.dealQuote.subject = 'Quotation - Reg';
    this.dealQuote.dealId = this.dealId;

    this.getDealQuotation();

  }

  saveDealQuotation() {
    if (this.dealQuote.quoteNo == '') {
      this.snackbar.open('Quotation No should not be empty');
      return false;
    }

    this.saving = true;

    this.ss.saveDealQuotation(this.dealQuote).subscribe(res => {
      this.saving = false;
      if (res['StatusCode'] == '00') {
        this.snackbar.open('Saved Successfully');
        this.dealQuote = res['DealQuotation'];

        this.dealQuote.validUntilObject = { isRange: false, singleDate: { jsDate: (this.dealQuote.validUntil != null) ? new Date(this.dealQuote.validUntil) : this.dealQuote.validUntil } };
        this.dealQuote.quoteDateObject = { isRange: false, singleDate: { jsDate: (this.dealQuote.quoteDate != null) ? new Date(this.dealQuote.quoteDate) : this.dealQuote.quoteDate } };

      } else if (res['StatusCode'] == '03') {
        this.snackbar.open(res['StatusDesc']);
      } else {
        this.snackbar.open('Somethig went wrong');
      }
    }, error => { this.saving = false; })
  }

  getDealQuotation() {
    this.loading = true;
    this.ss.getDealQuotation(this.dealId).subscribe(res => {
      this.loading = true;
      if (res['StatusCode'] == '00') {
        this.loading = false;
        console.log(res['DealQuotation'] != null);
        console.log(res['DealQuotation'] == null);

        if (res['DealQuotation'] != null) {
          console.log("Inside if");
          this.dealQuote = res['DealQuotation'];

          this.dealQuote.validUntilObject = { isRange: false, singleDate: { jsDate: (this.dealQuote.validUntil != null) ? new Date(this.dealQuote.validUntil) : this.dealQuote.validUntil } };
          this.dealQuote.quoteDateObject = { isRange: false, singleDate: { jsDate: (this.dealQuote.quoteDate != null) ? new Date(this.dealQuote.quoteDate) : this.dealQuote.quoteDate } };
        } else if (res['DealQuotation'] == null) {

          if (this.deal !== undefined && this.deal.dealType == 'AMC') {
            this.dealQuote.subject = 'Quotation for Annual Maintenance Contract as listed below';
          } else if (this.deal !== undefined && this.deal.dealType == 'Sales') {
            this.dealQuote.subject = 'Sales Quotation - Reg';
          }

          console.log("Inside else if");
          if (res['AutoGeneratedQuoteNo'] && res['AutoGeneratedQuoteNo'] != '' && res['AutoGeneratedQuoteNo'] != null) {
            this.dealQuote.quoteNo = res['AutoGeneratedQuoteNo'];
            this.snackbar.open('Quotation No "' + this.dealQuote.quoteNo + '" AutoIncremented from last quotation.');
          }
          if (res['LastTerms'] && res['LastTerms'] != '' && res['LastTerms'] != null) {
            this.dealQuote.terms = res['LastTerms'];
          }
        }

        console.log(this.dealQuote);
      } else {
        this.snackbar.open('Somethig went wrong');
      }
    }, error => { this.loading = false; })
  }

  clearFilters() {
    this.dealQuote = new DealQuotation();
  }

  generateQuotationPDF(Quote_Template) {
    this.generatingQuotationPDF = true;

    this.ss.generateQuotationPDF(this.dealQuote, Quote_Template, this.addRoundSeal, this.addFullSeal,
      this.addSign, this.designation, this.preamble, this.preamblePosition, this.exportType,
      this.detailedPricing).subscribe(res => {

        this.generatingQuotationPDF = false;
        if (res['StatusCode'] == '00') {
          this.dealQuote.filename = res['DealQuotation']['filename'];
          this.snackbar.open('Generated Successfully', '', { duration: 2000 });
          if (this.dealQuote.filename.endsWith(".pdf"))
            this.viewPDF();
        } else {
          this.snackbar.open('Something went wrong! Try again later', '', { duration: 2000 });
        }
      })
  }

  quotationFileUploadChange(file: File) {
    console.log(file);

    if (file.type.toLowerCase() != 'application/pdf') {
      this.snackbar.open('Only PDF file type is valid');
      return false;
    }

    Swal.fire({
      title: 'Are you sure?',
      text: "You want to Upload.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, Upload!'
    }).then((result) => {
      if (result.value) {
        this.generatingQuotationPDF = true;
        this.ss.UploadGeneratedQuotationPDF(this.dealQuote.id, file).subscribe(res => {

          this.generatingQuotationPDF = false;
          if (res['StatusCode'] == '00') {
            this.dealQuote.filename = res['DealQuotation']['filename'];
            this.snackbar.open('Uploaded Successfully', 'OK');
            if (this.dealQuote.filename.endsWith(".pdf"))
              this.viewPDF();
          } else {
            this.snackbar.open('Something went wrong! Try again later', 'OK');
          }
        })
      }
    })
  }

  toBase64 = file => new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = error => reject(error);
  });

  openEmailModal() {
    this.router.navigateByUrl(`sales/deals/overview/${this.dealId}/emails?mode=add&tab=quotation`);
  }

  resp(event) {
    console.log(event);
    if (event == 'close' || event == 'success') {
      this.showAddNewEmail = false;
    }
  }

  viewPDF() {
    let url = environment.apiUrl + 'download/download-deals-pdf/view/' + this.dealId + '/' + this.dealQuote.filename;
    window.open(url, 'winname', 'directories=no,titlebar=no,toolbar=no,location=no,status=no,menubar=no,scrollbars=no,resizable=no,width=auto,height=auto');
  }

  downloadPDF() {
    let url = environment.apiUrl + 'download/download-deals-pdf/download/' + this.dealId + '/' + this.dealQuote.filename;
    window.open(url, '_blank');
  }

  OnChoosePreamble(event) {
    console.log(event);
  }

  OnUnChoosePreamble(event) {
    console.log(event);
  }

  openShareWhatsAppModal() {

    let url = environment.apiUrl + 'download/download-deals-pdf/view/' + this.dealId + '/' + this.dealQuote.filename;

    this.shareWhatsappText = this.dealQuote.subject + '\n' +
      'Quote Number : ' + this.dealQuote.quoteNo + '\n\n' +
      'View Quotation by below url : \n\n ' +
      url + ' \n\n'
      + 'Thanks\n' + this.auth.getLoginAgentFullName();

    console.log(this.shareWhatsappText);

    $(function () {
      $('#whatsappShareModal').appendTo("body").modal('show');
    });
  }


  shareWhatsApp() {
    let url = `https://wa.me/${this.shareWhatsappTo}?text=${encodeURI(this.shareWhatsappText)}`;
    window.open(url, '_blank');
  }

  changeDueDate(term) {
    if (this.dealQuote.quoteDate == null) {
      this.snackbar.open('Choose Valid Quote Date');
    } else {
      console.log(this.dealQuote.quoteDate);
      let toDate: Date = new Date(this.dealQuote.quoteDate);
      if (term == 'Net 15')
        toDate.setDate(toDate.getDate() + 15);
      else if (term == 'Net 30')
        toDate.setDate(toDate.getDate() + 30);
      else if (term == 'Net 45')
        toDate.setDate(toDate.getDate() + 45);
      else if (term == 'Net 60')
        toDate.setDate(toDate.getDate() + 60);
      else if (term == 'Net 90')
        toDate.setDate(toDate.getDate() + 90);

      console.log(toDate);
      this.dealQuote.validUntilObject = { isRange: false, singleDate: { jsDate: toDate } };
      this.dealQuote.validUntil = this.dealQuote.validUntilObject.singleDate.jsDate;
    }
  }

}
